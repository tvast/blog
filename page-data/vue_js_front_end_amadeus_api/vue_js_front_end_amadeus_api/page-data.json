{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/vue_js_front_end_amadeus_api/vue_js_front_end_amadeus_api/","webpackCompilationHash":"30fd70012c50e02ab085","result":{"data":{"site":{"siteMetadata":{"title":"A developer journey","social":[{"name":"twitter","url":"https://twitter.com/theophile_vast"},{"name":"github","url":"https://github.com/tvast"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"8f087f64-e6cf-50b8-a0f6-fb303b13231b","excerpt":"Today we'll learn how to implement a front end app to interact with the amadeus self service travel API.  Let's first initialize ourâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Vue JS app for amadeus API\",\n  \"date\": \"2020-01-07T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today we\\u2019ll learn how to implement a front end app to interact with the amadeus self service travel API. \"), mdx(\"p\", null, \"Let\\u2019s first initialize our environment. We need node js install to run this sample code you\\u201Dll find it here\"), mdx(\"h2\", {\n    \"id\": \"set-up\"\n  }, \"Set up\"), mdx(\"p\", null, \"You need to install vue js cli \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm install -g @vue/cli\\n# OR\\nyarn global add @vue/cli\\n\")), mdx(\"p\", null, \"Then create a boillerplate project : \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"vue create awesome-travel-agency\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"cd awesome-travel-agency\\n\")), mdx(\"p\", null, \"Install depedencies\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm i\\n\")), mdx(\"p\", null, \"serve the project\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm run serve\\n\")), mdx(\"h2\", {\n    \"id\": \"first-component--search-travel\"\n  }, \"First component : search travel\"), mdx(\"p\", null, \"The sample project provide you your first component HelloWorld.vue. CHange the name for the one you like.\\nBTW you\\u2019ll need to read our last article about how to implement a node js back end to make this example working. you\\u2019ll find it  \", mdx(\"a\", {\n    href: \"https://github.com/tvast/backend-node-js-amadeus-search-flight-API\"\n  }, \"here\"), \" \"), mdx(\"p\", null, \"To send information to the back end we need a form. This form will handle the binding between the data object and the user interface. Here is a code example working with vue marterial library UI :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm install vue-material --save\\n\")), mdx(\"p\", null, \"Then you can use the ui tools in your html template\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \" <form class=\\\"form\\\">\\n            <div class=\\\"title\\\">\\n                <h2 class=\\\"titleStyle\\\">Booking engine</h2>\\n                <!-- <p>Select locations and dates to get started.</p> -->\\n            </div>\\n\\n            <div class=\\\"categories\\\">\\n            </div>\\n            <div class=\\\"row1\\\">\\n                <div class=\\\"locations from-location1\\\">\\n                    <md-autocomplete @input=\\\"searchCity()\\\" v-model=\\\"selectedCountryDeparture\\\" :md-options=\\\"$store.getters.dataCitySearch\\\" @md-changed=\\\"getCountriesDeparture\\\" @md-selected=\\\"getSeletedItem()\\\">\\n                        <label>Departure</label>\\n\\n                        <template slot=\\\"md-autocomplete-item\\\" slot-scope=\\\"{ item, term }\\\"> {{item.name}}--{{item.id}} </template>\\n                    </md-autocomplete>\\n\\n                </div>\\n                <div class=\\\"locations to-location1\\\">\\n                    <md-autocomplete @input=\\\"searchCity2()\\\" v-model=\\\"selectedCountryArrival\\\" :md-options=\\\"$store.getters.dataCitySearchArrival\\\" @md-changed=\\\"getCountriesDeparture2\\\" @md-selected=\\\"getSeletedItem2()\\\">\\n                        <label>Arrival</label>\\n                        <template slot=\\\"md-autocomplete-item\\\" slot-scope=\\\"{ item, term }\\\"> {{item.name}}--{{item.id}} </template>\\n                    </md-autocomplete>\\n                </div>\\n            </div>\\n            <div class=\\\"row2\\\">\\n                <div class=\\\"dates depart\\\">\\n                    <label class=\\\"depart-date\\\" for=\\\"depart\\\">Departure:</label>\\n                    <md-datepicker v-model=\\\"selectedDateDeparture\\\" />\\n                </div>\\n                <div class=\\\"dates return\\\">\\n                    <label class=\\\"returning-date\\\" for=\\\"return\\\">Return:</label>\\n                    <md-datepicker v-model=\\\"selectedDateArrival\\\" />\\n                </div>\\n            </div>\\n\\n            <div class=\\\"\\\">\\n                <md-button v-mojs=\\\"mojsOptions\\\" @click=\\\"letsFly()\\\" class=\\\"md-raised md-primary\\\">Let's Fly!</md-button>\\n                <!-- <p v-mojs=\\\"mojsOptions\\\" class=\\\"next\\\"  >Choose flight</p> -->\\n            </div>\\n        </form>\\n\")), mdx(\"p\", null, \"For the search city, please find more details on the article \", mdx(\"a\", {\n    href: \"https://developers.amadeus.com/blog/airport-autocomplete-app-with-the-mern-stack\"\n  }, \"here\")), mdx(\"p\", null, \"Add the following function to trigger the backend for search a flight:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"letsFly() {\\n            this.showLoader(true)\\n            var vm = this;\\n            this.info2 = \\\"\\\";\\n            let bodyDate = \\\"departure=\\\" +\\n                this.selectedDateDeparture +\\n                \\\"&arrival=\\\" +\\n                this.selectedDateArrival +\\n                \\\"&locationDeparture=\\\" +\\n                this.selectedCountryDeparture +\\n                \\\"&locationArrival=\\\" +\\n                this.selectedCountryArrival;\\n\\n            window.console.log(bodyDate);\\n\\n            async function postUrlEncoded() {\\n\\n\\n                const response = await fetch(vm.localhost + \\\"date?\\\" + bodyDate, {\\n                    method: 'POST', // *GET, POST, PUT, DELETE, etc.\\n                    mode: 'cors', // no-cors, *cors, same-origin\\n                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\\n                    credentials: 'same-origin', // include, *same-origin, omit\\n                    headers: {\\n                        // 'Content-Type': 'application/json'   \\n                        'Content-Type': 'application/x-www-form-urlencoded',\\n                    },\\n                    redirect: 'follow', // manual, *follow, error\\n                    referrerPolicy: 'no-referrer', // no-referrer, *client\\n                    body: bodyDate // body data type must match \\\"Content-Type\\\" header\\n                });\\n                return await response.json(); // parses JSON response into native JavaScript objects\\n            }\\n\\n            postUrlEncoded().then((data) => {\\n\\n                window.console.log(data)\\n                this.info2 = data.data;\\n                this.toggleInfo = true;\\n\\n            }).catch(function(error) {\\n                window.console.error(error);\\n              \\n            });\\n\\n        }\\n    \\n\")), mdx(\"h2\", {\n    \"id\": \"second-component--search-price\"\n  }, \"Second component : Search price\"), mdx(\"p\", null, \"We keep what we implemented above. ANd we extend it with some few HTML and function\"), mdx(\"p\", null, \"For this other API endpoint we need to add a UI component to select an item from the flight search. A checkbox or a switch will done the job for us. \"), mdx(\"p\", null, \"the function watch to keep an eyes of our selected item\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\nwatch:{\\n      selectedTravel(){\\n        // alert('checkbox changed');\\n        return window.console.log(this.selectedTravel);}\\n      },\\n\\n\")), mdx(\"p\", null, \"Implement this in method object :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"getFLightPrice() {\\n\\n            var vm = this;\\n\\n            function chooseCity(flight) {\\n                return flight.id === vm.selectedTravel;\\n            }\\n            this.searchObject = this.info2.find(chooseCity);\\n            this.$store.commit('changePricing', this.searchObject);\\n\\n\\n            var duh = this.searchObject\\n            async function postSearchPrice() {\\n\\n\\n                const response = await fetch(vm.localhost + \\\"flightprice\\\", {\\n\\n\\n                    method: 'POST', // *GET, POST, PUT, DELETE, etc.\\n                    mode: 'cors', // no-cors, *cors, same-origin\\n                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\\n                    credentials: 'same-origin', // include, *same-origin, omit\\n                    headers: {\\n                        'Content-Type': 'application/json'\\n                    },\\n                    redirect: 'follow', // manual, *follow, error\\n                    referrerPolicy: 'no-referrer', // no-referrer, *client\\n                    body: JSON.stringify(duh) // body data type must match \\\"Content-Type\\\" header\\n                });\\n                return await response.json(); // parses JSON response into native JavaScript objects\\n            }\\n\\n            postSearchPrice().then((data) => {\\n                // window.console.log(data)\\n                this.flightConfirmation = \\\"PriceConfirmed\\\";\\n                this.info3 = data;\\n                this.isLoading = true\\n                this.createOrderAndget()\\n\\n            });\\n\\n        },\\n\\n\")), mdx(\"p\", null, \"Add this element to the item in the HTML\"), mdx(\"p\", null, \"And here we are we slect an item from the flight search API and we send it to the backend to confirm the price.\"), mdx(\"h2\", {\n    \"id\": \"third-component--create-order\"\n  }, \"Third component : create order\"), mdx(\"p\", null, \"Now that we got our price confirmation we can create our request to create an order and get the confirmation code of our travel.\"), mdx(\"p\", null, \"We need to trigger a form with the passenger data to post it to the backend and receive our confirmation number \"), mdx(\"p\", null, \"Then we need to pass the data to a function (don\\u2019t forget to bind those new v-model values to the data object ).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"chooseflight() {\\n            var vm = this;\\n\\n            function chooseCity(flight) {\\n                return flight.id === vm.selectedTravel;\\n            }\\n            this.searchObject = this.info2.find(chooseCity);\\n            this.$store.commit('changePricing', this.searchObject);\\n\\n\\n            var duh = this.searchObject\\n\\n            async function postBody() {\\n                const response = await fetch(\\\"http://localhost:2800\\\" + \\\"/flightCreateOrder\\\", {\\n                    method: 'POST', // *GET, POST, PUT, DELETE, etc.\\n                    mode: 'cors', // no-cors, *cors, same-origin\\n                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\\n                    credentials: 'same-origin', // include, *same-origin, omit\\n                    headers: {\\n                        'Content-Type': 'application/json'\\n                    },\\n                    redirect: 'follow', // manual, *follow, error\\n                    referrerPolicy: 'no-referrer', // no-referrer, *client\\n                    body: JSON.stringify(duh) // body data type must match \\\"Content-Type\\\" header\\n                });\\n                return await response.json(); // parses JSON response into native JavaScript objects\\n            }\\n\\n            postBody()\\n\\n            async function CreateOrder() {\\n\\n                const response = await fetch(\\\"http://localhost:2800/\\\" + \\\"flightcretaeorderget\\\");\\n                return await response.json();\\n            }\\n\\n            try {\\n\\n                CreateOrder()\\n                    .then((json) => {\\n\\n                        var self = this\\n                      \\n                        window.console.log(json)\\n                        self.$store.commit('change', json)\\n                      \\n                        router.push('result')\\n                        self.showLoader(false);\\n                     \\n\\n                    })\\n            } catch (error) {\\n                alert(error);\\n                Swal.fire({\\n                    title: 'Error!',\\n                    text: 'Do you want to continue' + error,\\n                    icon: 'error',\\n                    confirmButtonText: 'skip'\\n                })\\n            } // JSON data parsed by `response.json()` call\\n        },\\n\")), mdx(\"p\", null, \"we pass the result via vuex to an other component to display our comfirmation number :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"  <template v-if=\\\"toggleInfo2\\\">\\n          <div v-for=\\\"item in info3.data.associatedRecords\\\">\\n            <h1 v-mojs=\\\"mojsOptions\\\">{{item.reference}}</h1>\\n          </div>\\n        </template>\\n\")), mdx(\"p\", null, \"And if we want to use our this.showloader function here is the code in main.js :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"Vue.mixin({\\n  data: function(){\\n    return {\\n      // showLoader : false,\\n    }\\n  },\\n  computed: {\\n  },/* eslint-disable no-mixed-spaces-and-tabs */\\n  methods: {\\n    showLoader: bool => {\\n      document.getElementById(\\\"loading\\\").style.display = bool ? \\\"block\\\" : \\\"none\\\";\\n    },\\n\\n    \\n   }\\n});\\n\\n\")), mdx(\"p\", null, \"then give to an image or your favorite html/css animation the id of loading and the function this.showLoader will trigger the loading indicator. Forget all the library about loading this is the best option for vue js use.\"), mdx(\"h2\", {\n    \"id\": \"using-vuex-to-display-result-data-in-a-third-party-component\"\n  }, \"Using vuex to display result data in a third party component\"), mdx(\"p\", null, \"It\\u2019s the tricky part of this tutorial. First you need to install vuex \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm install vuex --save\\n# OR\\nyarn add vuex\\n\")), mdx(\"p\", null, \"Create a store.js file\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"touch store.js\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\n//store.js\\n// Make sure to call Vue.use(Vuex) first if using a module system\\nimport Vue from 'vue'\\nimport Vuex from 'vuex'\\nVue.use(Vuex)\\n\\nexport const store = new Vuex.Store({\\n\\n  state: {\\n    flavor: '',\\n    pricing :'',\\n    handle : \\\"\\\",\\n    dataCitySearch:[],\\n    dataCitySearchArrival:[]\\n  },\\n  mutations: {\\n    change(state, flavor) {\\n      state.flavor = flavor\\n    }\\n    ,\\n    changePricing (state, pricing) {\\n    state.pricing = pricing\\n    },\\n    dataCitySearchMute (state, dataCitySearch){\\n      state.dataCitySearch=dataCitySearch\\n    },\\n    dataCitySearchArrival (state, dataCitySearchArrival){\\n      state.dataCitySearchArrival=dataCitySearchArrival\\n    },\\n  },\\n  getters: {\\n    flavor: state => state.flavor,\\n    pricing: state => state.pricing,\\n    HANDLE : state => {\\n      return state.handle\\n    },dataCitySearch : state => {\\n      return state.dataCitySearch\\n    },dataCitySearchArrival : state => {\\n      return state.dataCitySearchArrival\\n    },\\n    \\n\\n  }\\n})\\n\")), mdx(\"p\", null, \"If you wanna dive into the meaning of this code i recommend you this article about vuex store implementation : \", mdx(\"a\", {\n    href: \"https://flaviocopes.com/vuex/#introduction-to-vuex\"\n  }, \"about vuex\")), mdx(\"p\", null, \"Last but not least we need to update our components to made them commit the new value of the store : \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"this.$store.commit('dataCitySearchMute', json.data)\\n\\n\")), mdx(\"p\", null, \"And display in the view:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<header v-for=\\\"(item,index) in $store.getters.flavor.data.flightOffers\\\">\\n        <h1>Boarding pass</h1>\\n        <div>\\n          <h5>Flight n\\xB0</h5>\\n          <p> <span  v-for=\\\"(foo, index) in $store.getters.flavor.data.associatedRecords\\\" :key=\\\"index\\\" > \\n           <div >\\n            {{foo.reference}}\\n          </div>\\n       </span></p>\\n        </div>\\n        <div>\\n          <h5>Price</h5>\\n          <p>{{item.price.grandTotal}}</p>\\n        </div>\\n</header>\\n\")), mdx(\"p\", null, \"Here we print the value of the store by looping in the array of value of flight offer array. We can see the reference of the booked flight with our application. Job is done we can book a flight with all our application !\"), mdx(\"h2\", {\n    \"id\": \"final-component\"\n  }, \"Final component\"), mdx(\"p\", null, \"You can find the whole project available live  \", mdx(\"a\", {\n    href: \"https://tvast.github.io/amadeusSearchFLightVue/#/\"\n  }, \"here\")), mdx(\"p\", null, \"That\\u2019s it enjoy this code repo and have fun playing with the amadeus self service travel API!\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/vue_js_front_end_amadeus_api/vue_js_front_end_amadeus_api/","title":"Vue JS app for amadeus API","tags":[],"keywords":[],"date":"January 07, 2020"},"previous":{"__typename":"MdxBlogPost","id":"80294a46-0944-5e96-b279-f001d4d50f05","excerpt":"Amadeus I recently accept a job offer for working in  Amadeus . More tutorrials will comee about how use the Amadeus API for your travelâ€¦","slug":"/moving_to_amadeus/moving_to_Amadeus/","title":"A new challenge","date":"December 12, 2019"},"next":{"__typename":"MdxBlogPost","id":"5b3438d4-0078-5641-ac32-6723f542588d","excerpt":"Hello developers! Today weâ€™re going to learn how to build a back end for a flight booking app with Node.js using Amadeus Quick-Connect, aâ€¦","slug":"/nodeJs_amadeus/nodejs_amadeus/","title":"Node JS app for amadeus API","date":"January 07, 2020"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8f087f64-e6cf-50b8-a0f6-fb303b13231b","previousId":"80294a46-0944-5e96-b279-f001d4d50f05","nextId":"5b3438d4-0078-5641-ac32-6723f542588d"}}}