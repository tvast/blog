{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/nodejs_amadeus_sdk/nodejs_amadeus_sdk/","webpackCompilationHash":"69993220df5b7bf0b7a2","result":{"data":{"site":{"siteMetadata":{"title":"A developer journey","social":[{"name":"twitter","url":"https://twitter.com/theophile_vast"},{"name":"github","url":"https://github.com/tvast"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"c9063f40-2c30-5e67-8ff5-4c61445a8da3","excerpt":" a flight booking app with Node.js  Theophile Vast  Today we’re going to learn how to build the backend for a flight booking app with Node…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Node JS app for amadeus API with node sdk amadeus\",\n  \"date\": \"2020-03-23T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \" a flight booking app with Node.js \"), mdx(\"p\", null, \"Theophile Vast \"), mdx(\"p\", null, \"Today we\\u2019re going to learn how to build the backend for a flight booking app with Node.js. using Amadeus Quick-Connect, a flight booking bundle comprised of three Self-Service APIs: Flight Offers Search, Flight Offers Price and Flight Create Orders.  \"), mdx(\"p\", null, \"This tutorial will cover: \"), mdx(\"p\", null, \"Setting up a simple Node.js server \"), mdx(\"p\", null, \"Creating a post request to get a list of flight deals \"), mdx(\"p\", null, \"Calling Flight Offers Price to get the final price \"), mdx(\"p\", null, \"Calling Flight Create Orders to complete the reservation \"), mdx(\"p\", null, \"You\\u2019ll see in the code that we\\u2019ve also implemented a search input field with a city/airport autocomplete functionality using the Airport & City Search API. For more details on how this is done, please read Airport & City Search using the MERN stack.  \"), mdx(\"p\", null, \"\\uFDDFHYPERLINK \\u201D\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.amadeus.com/self-service/category/air/api-doc/flight-offers-search%22We\"\n  }), \"https://developers.amadeus.com/self-service/category/air/api-doc/flight-offers-search\\u201DWe\"), \" will fetch the API data directly calling the endpoints but remember that you can always use our Node SDK\\u202F to perform APIs calls: it wrappers the authorization process and hides the complexity of using the endpoints (URIs, headers, etc). \"), mdx(\"p\", null, \"At the end of the article, you\\u2019ll find a link to download the source code from the app from our GitHub page. \"), mdx(\"p\", null, \"Now, let\\u2019s start coding! \"), mdx(\"h2\", {\n    \"id\": \"setting-up-a-simple-nodejs-server\"\n  }, \"Setting up a simple Node.js server\"), mdx(\"p\", null, \"The first thing we need to get up and running is a simple Node.js server. Here\\u2019s an example of a minimal express server listening on port 3000: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"server.js \\n\\nvar express = require('express') \\nvar http = require('http').createServer(app);\\n\\nvar app = express(), \\n\\nvar server = app.listen(process.env.PORT || 2800,()=>{\\n  console.log(\\\"Howdy, I am running at PORT 2800\\\")\\n}) \\n\")), mdx(\"p\", null, \"Now we need to install the amadeus node package  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm install amadeus --save\\n\")), mdx(\"p\", null, \"and plug it to our server with our credentials :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"//content before\\nvar Amadeus = require('amadeus');\\n\\nvar amadeus = new Amadeus({\\n  clientId: 'REPLACE_BY_YOUR_API_KEY',\\n  clientSecret: 'REPLACE_BY_YOUR_API_SECRET'\\n});\\n//content after\\n\")), mdx(\"p\", null, \"You can test it by connecting from your browser to localhost:3000. The server is very basic but don\\u2019t worry, we\\u2019ll be expanding it in a little while.   \"), mdx(\"p\", null, \"##Getting a list of city\"), mdx(\"p\", null, \"You can follow more in detail our article about the technique of setting up a server for city search.\"), mdx(\"p\", null, \"here is the code for our purpose :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"app.get(`/citySearch`, async (req, res) => {\\n  console.log(req.query)\\n  var keywords = req.query.keyword;\\n  // var urlSend= \\\"&keyword=\\\"+keyword\\n  // const { page, subType, keyword } = req.query;\\n  // API call with params we requested from client app\\n  const response = await amadeus.client.get(\\\"/v1/reference-data/locations\\\", { \\n    keyword : keywords,\\n    subType :\\\"CITY,AIRPORT\\\",\\n    // \\\"page[offset]\\\": 1 * 10\\n  }).catch(x=>console.log(x));\\n  // Sending response for client\\n  try {\\n    await res.json(JSON.parse(response.body));\\n  } catch (err) {\\n    await res.json(err);\\n  }\\n});\\n\")), mdx(\"p\", null, \"pass directly your city in the url localhost:2800/citysearch?keyword=\\u201CYOUR_SEARCH\\u201D\"), mdx(\"h2\", {\n    \"id\": \"creating-a-post-request-to-get-a-list-of-flight-deals\"\n  }, \"Creating a post request to get a list of flight deals\"), mdx(\"p\", null, \"Time to retrieve some flight offers! As Flight Offers Search documentation says, we need to use /shopping/flight-offers as endpoint. \"), mdx(\"p\", null, \"With everything in mind, we can build the request on the backend as follows: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"app.post('/date', async function(req, res) {\\n\\n  console.log(req.body)\\n  departure = req.body.departure;\\n  arrival = req.body.arrival;\\n  locationDeparture = req.body.locationDeparture;\\n  locationArrival =req.body.locationArrival;\\n\\nconst response = await amadeus.shopping.flightOffersSearch.get({\\n    originLocationCode: locationDeparture,\\n    destinationLocationCode: locationArrival,\\n    departureDate: departure,\\n    adults: '1'\\n}).catch(err=>console.log(err))\\n\\n try {\\n    await res.json(JSON.parse(response.body));\\n  } catch (err) {\\n    await res.json(err);\\n  }\\n\\n  }); \\n\")), mdx(\"p\", null, \"You can call now \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:2800/date?departure=2020-05-01&arrival=2020-02-27&locationDeparture=MAD&locationArrival=LAX\"\n  }), \"http://localhost:2800/date?departure=2020-05-01&arrival=2020-02-27&locationDeparture=MAD&locationArrival=LAX\"), \". Each parameters can be modify.\"), mdx(\"p\", null, \"The API call returns a list of flight-offers objects. Next step: getting the final flight price before booking. \"), mdx(\"p\", null, \"##Calling Flight Offers Price to get the final flight price \"), mdx(\"p\", null, \"The price and availability of a seat can change between the time of search and the time of booking, so we\\u2019ll need to confirm the price before sending it to the Create Order endpoint. To do this, we select an item from the Flight Offers Search response and we pass it to another request: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"app.post('/flightprice', async function(req, res) {\\n  res.json(req.body);\\n  inputFlight = req.body;\\n  console.log(req.body)\\n\\n  const responsePricing = await amadeus.shopping.flightOffers.pricing.post(\\n      JSON.stringify({\\n        'data': {\\n          'type': 'flight-offers-pricing',\\n          'flightOffers': inputFlight\\n        }})).catch(err=>console.log(err))\\n\\n   try {\\n    await res.json(JSON.parse(responsePricing.body));\\n  } catch (err) {\\n    await res.json(err);\\n  }\\n\\n   })\\n\\n\")), mdx(\"p\", null, \"inputFlight is your flight offer that you select from your llast call to the api\"), mdx(\"p\", null, \"Once the price and availability are confirmed, you can move to the final step. \"), mdx(\"p\", null, \"##Calling Flight Create Orders to complete the booking \"), mdx(\"p\", null, \"After selecting a flight and confirming the price, it\\u2019s time to book the ticket! We do this by creating a request containing the selected flight offer and the passenger data (name, lastname and mail are enough for this demo) and passing it to a function: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"app.post('/flightCreateOrder', async function(req, res) {\\n  res.json(req.body);\\n\\n  let inputFlightCreateOrder = req.body;\\nconsole.log(req.body)\\nconst returnBokkin = amadeus.booking.flightOrders.post(\\n      JSON.stringify({\\n  \\\"data\\\": {\\n    \\\"type\\\": \\\"flight-order\\\",\\n    \\\"flightOffers\\\": [\\n           inputFlightCreateOrder\\n        ],\\n    \\\"travelers\\\": [\\n      {\\n        \\\"id\\\": \\\"1\\\",\\n        \\\"dateOfBirth\\\": \\\"1982-01-16\\\",\\n        \\\"name\\\": {\\n          \\\"firstName\\\": \\\"JORGE\\\",\\n          \\\"lastName\\\": \\\"GONZALES\\\"\\n        },\\n        \\\"gender\\\": \\\"MALE\\\",\\n        \\\"contact\\\": {\\n          \\\"emailAddress\\\": \\\"jorge.gonzales833@telefonica.es\\\",\\n          \\\"phones\\\": [\\n            {\\n              \\\"deviceType\\\": \\\"MOBILE\\\",\\n              \\\"countryCallingCode\\\": \\\"34\\\",\\n              \\\"number\\\": \\\"480080076\\\"\\n            }\\n          ]\\n        },\\n        \\\"documents\\\": [\\n          {\\n            \\\"documentType\\\": \\\"PASSPORT\\\",\\n            \\\"birthPlace\\\": \\\"Madrid\\\",\\n            \\\"issuanceLocation\\\": \\\"Madrid\\\",\\n            \\\"issuanceDate\\\": \\\"2015-04-14\\\",\\n            \\\"number\\\": \\\"00000000\\\",\\n            \\\"expiryDate\\\": \\\"2025-04-14\\\",\\n            \\\"issuanceCountry\\\": \\\"ES\\\",\\n            \\\"validityCountry\\\": \\\"ES\\\",\\n            \\\"nationality\\\": \\\"ES\\\",\\n            \\\"holder\\\": true\\n          }\\n        ]\\n      },\\n      {\\n        \\\"id\\\": \\\"2\\\",\\n        \\\"dateOfBirth\\\": \\\"2012-10-11\\\",\\n        \\\"gender\\\": \\\"FEMALE\\\",\\n        \\\"contact\\\": {\\n          \\\"emailAddress\\\": \\\"jorge.gonzales833@telefonica.es\\\",\\n          \\\"phones\\\": [\\n            {\\n              \\\"deviceType\\\": \\\"MOBILE\\\",\\n              \\\"countryCallingCode\\\": \\\"34\\\",\\n              \\\"number\\\": \\\"480080076\\\"\\n            }\\n          ]\\n        },\\n        \\\"name\\\": {\\n          \\\"firstName\\\": \\\"ADRIANA\\\",\\n          \\\"lastName\\\": \\\"GONZALES\\\"\\n        }\\n      }\\n    ]\\n  }\\n})\\n\\n    ).then(function(response){\\n    console.log(response.result);\\n}).catch(function(responseError){\\n    console.log(responseError);\\n});\\n\\n})\\n\\n\")), mdx(\"p\", null, \"inputFlightCreateOrder is the response from flight offer pricing.\"), mdx(\"p\", null, \"In the response object, there is a value call reference with the flight confirmation number.  \"), mdx(\"p\", null, \"Congrats! You are ready to fly! \"), mdx(\"p\", null, \"Source code : \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/amadeus4dev/amadeus-flight-booking-node\"\n  }), \"https://github.com/amadeus4dev/amadeus-flight-booking-node\")), mdx(\"p\", null, \"The complete code is available on the Amadeus for Developers GitHub page. \"), mdx(\"p\", null, \"In order to run the server, switch to the server folder, install the dependencies with: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm  install \\n \\n\")), mdx(\"p\", null, \"And run the server by typing: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"npm run start  \\n\")), mdx(\"p\", null, \"The backend will listen for incoming connection on port 2800. At this point you can either use the client based on vue.js which is on the repository, or use postman to perform the calls to the backend. \"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/nodejs_amadeus_sdk/nodejs_amadeus_sdk/","title":"Node JS app for amadeus API with node sdk amadeus","tags":[],"keywords":[],"date":"March 23, 2020"},"previous":{"__typename":"MdxBlogPost","id":"9fe4d46f-c705-52aa-9c89-1b2bcb090190","excerpt":"plume.js \n PLume.js is a javascript helper to interact with the Amadeus self service API.IT contain easy to use function that trigger the…","slug":"/plume_js/plumejs/","title":"Plume js an helper to interact with amadeus self service api","date":"February 10, 2020"},"next":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c9063f40-2c30-5e67-8ff5-4c61445a8da3","previousId":"9fe4d46f-c705-52aa-9c89-1b2bcb090190"}}}